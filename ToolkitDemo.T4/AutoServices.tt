<#@ template debug="False" hostspecific="True" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="MultiOutput.tt" #>
<#@ Output Extension="log" #>
<#
	string modelsNamespace = "ToolkitDemo.Models";
	string servicesNamespace = "ToolkitDemo.Services";
	var currentRepositoryName = "ToolkitDemo";
	string rootFolder = Host.ResolveAssemblyReference("$(SolutionDir)");
    var schemasFolderPath =Path.Combine(rootFolder,"WebSite",string.Format(@"Cms_Data\Contents\{0}\Schemas\", currentRepositoryName));
	if (!Directory.Exists(schemasFolderPath)) { 
		throw new Exception(String.Format("\"{0}\" not found", schemasFolderPath));
	}
	string[] schemaFolderPaths = Directory.GetDirectories(schemasFolderPath).Where(it => !it.EndsWith("svn")).ToArray();
	foreach(string schemaFolderPath in schemaFolderPaths) {
		string schemaName = new DirectoryInfo(schemaFolderPath).Name.Trim();
		AutoGenerateService(modelsNamespace, servicesNamespace, schemaName);

		string outputFileName = schemaName + "Service.cs";
		SaveOutput(outputFileName);
	}
	DeleteOldOutputs();
#>
Auto generate services at <#= DateTime.Now #> from <#= schemasFolderPath #>
<#+ void AutoGenerateService(string modelsNamespace, string servicesNamespace, string schemaName) { #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Kooboo.CMS.Content.Models;
using Kooboo.CMS.Content.Query;
using Kooboo.CMS.Toolkit;
using Kooboo.CMS.Toolkit.Services;
using <#= modelsNamespace #>;

namespace <#= servicesNamespace #>
{
	public class <#= schemaName #>Service : ServiceBase<<#= schemaName #>>
    {
        public override <#= schemaName #> Get(TextContent textContent)
        {
            if(textContent != null)
            {
                return new <#= schemaName #>(textContent);
            }
            return null;
        }
	}
}
<#+ } #>